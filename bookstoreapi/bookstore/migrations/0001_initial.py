# Generated by Django 3.2 on 2023-08-07 10:22

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title ')),
                ('author', models.CharField(default='', max_length=100, verbose_name='Author ')),
                ('editor', models.CharField(blank=True, default='', max_length=100, verbose_name='Editor ')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('quantity', models.PositiveIntegerField(blank=True, default=0, verbose_name='Quantity')),
                ('price', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Price')),
                ('book_available', models.BooleanField(default=True)),
                ('image_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='imageUrl')),
                ('image', models.ImageField(blank=True, null=True, upload_to='bookstoreapi/books/images', verbose_name='Image')),
                ('rating', models.DecimalField(blank=True, decimal_places=1, default=0.0, max_digits=2, verbose_name='Rating')),
                ('year_published', models.CharField(blank=True, max_length=4, verbose_name='Year of publication')),
                ('pages', models.CharField(blank=True, max_length=5, verbose_name='Pages')),
            ],
        ),
        migrations.CreateModel(
            name='BookOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField(verbose_name='Quantity')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bookstore.book')),
            ],
            options={
                'verbose_name': 'Book order',
                'verbose_name_plural': 'Book order',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.user')),
                ('phone', models.CharField(blank=True, max_length=10, validators=[django.core.validators.RegexValidator(message='Phone number must be exactly 10 digits.', regex='^\\d{10}$')], verbose_name='Phone')),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'abstract': False,
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ShippingInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=50, verbose_name='Name')),
                ('address', models.CharField(max_length=255, verbose_name='Address')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('state', models.CharField(blank=True, max_length=255, verbose_name='State')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='Postal_code')),
                ('country', models.CharField(default='', max_length=255, verbose_name='Country')),
                ('phone', models.CharField(blank=True, max_length=10, verbose_name='Phone')),
            ],
            options={
                'verbose_name': 'Shipping information',
                'verbose_name_plural': 'Shipping information',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='WishList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('books', models.ManyToManyField(blank=True, to='bookstore.Book', verbose_name='Books')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256, verbose_name='Title ')),
                ('content', models.TextField(blank=True, verbose_name='Content')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('last_updated_at', models.DateTimeField(auto_now=True, verbose_name='Last modification date')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Publication date')),
                ('categories', models.ManyToManyField(blank=True, related_name='posts', to='bookstore.Category', verbose_name='Categories')),
                ('tags', models.ManyToManyField(blank=True, related_name='posts', to='bookstore.Tag', verbose_name='Tags')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'ordering': ['-published_at', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created_at')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('shipping', 'Shipping'), ('shipped', 'Shipped')], default='pending', max_length=32, verbose_name='Status')),
                ('books', models.ManyToManyField(related_name='orders', through='bookstore.BookOrder', to='bookstore.Book', verbose_name='Books')),
                ('shipping_info', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='bookstore.shippinginfo', verbose_name='Shipping Infos')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bookstore.client', verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, verbose_name='Text')),
                ('rating', models.DecimalField(decimal_places=1, max_digits=2, verbose_name='Rating')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bookstore.book', verbose_name='Book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bookstore.client', verbose_name='User')),
            ],
        ),
        migrations.AddField(
            model_name='client',
            name='shipping_info',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='bookstore.shippinginfo', verbose_name='Shipping Info'),
        ),
        migrations.AddField(
            model_name='client',
            name='wishlist',
            field=models.OneToOneField(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='user', to='bookstore.wishlist', verbose_name='Wishlist'),
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created_at')),
                ('books', models.ManyToManyField(blank=True, to='bookstore.Book', verbose_name='Books')),
                ('user', models.OneToOneField(default='', null=True, on_delete=django.db.models.deletion.SET_NULL, to='bookstore.client', verbose_name='User')),
            ],
        ),
        migrations.AddField(
            model_name='bookorder',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bookstore.order'),
        ),
        migrations.AddField(
            model_name='book',
            name='categories',
            field=models.ManyToManyField(blank=True, related_name='books', to='bookstore.Category', verbose_name='Categories'),
        ),
        migrations.AddField(
            model_name='book',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='books', to='bookstore.Tag', verbose_name='Tags'),
        ),
        migrations.AlterUniqueTogether(
            name='bookorder',
            unique_together={('book', 'order')},
        ),
    ]
